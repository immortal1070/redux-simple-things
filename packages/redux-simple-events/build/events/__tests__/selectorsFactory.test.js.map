{"version":3,"sources":["../../../src/events/__tests__/selectorsFactory.test.js"],"names":["initialState","loading","users","dictionary","countries","cities","districts","testState","name","lastname","describe","simpleSelectors","it","usersSelector","selector","expect","toEqual","countriesSelector","districtsSelector","undefined"],"mappings":";;AAAA;;;;;;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,SAAS,EAAE,EADD;AAEVC,IAAAA,MAAM,EAAE;AACNC,MAAAA,SAAS,EAAE;AADL;AAFE;AAHO,CAArB;AAWA,IAAMC,SAAS,GAAG;AAChBL,EAAAA,KAAK,EAAE,CACL;AACEM,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GADK,CADS;AAOhBN,EAAAA,UAAU,EAAE;AACVC,IAAAA,SAAS,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB;AADD;AAPI,CAAlB;AAYAM,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjC,MAAMC,eAAe,GAAG,2CAAoBX,YAApB,CAAxB;AAEAY,EAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAM;AAC5C,QAAMC,aAAa,GAAGF,eAAe,CAACT,KAAhB,CAAsBY,QAA5C;AACAC,IAAAA,MAAM,CAACF,aAAa,CAACN,SAAD,CAAd,CAAN,CAAiCS,OAAjC,CAAyCT,SAAS,CAACL,KAAnD;AACD,GAHC,CAAF;AAKAU,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC7C,QAAMK,iBAAiB,GAAGN,eAAe,CAACR,UAAhB,CAA2BC,SAA3B,CAAqCU,QAA/D;AACAC,IAAAA,MAAM,CAACE,iBAAiB,CAACV,SAAD,CAAlB,CAAN,CAAqCS,OAArC,CAA6CT,SAAS,CAACJ,UAAV,CAAqBC,SAAlE;AACD,GAHC,CAAF;AAKAQ,EAAAA,EAAE,CAAC,qEAAD,EAAwE,YAAM;AAC9E,QAAMM,iBAAiB,GACrBP,eAAe,CAACR,UAAhB,CAA2BE,MAA3B,CAAkCC,SAAlC,CAA4CQ,QAD9C;AAEAC,IAAAA,MAAM,CAACG,iBAAiB,CAACX,SAAD,CAAlB,CAAN,CAAqCS,OAArC,CAA6CG,SAA7C;AACD,GAJC,CAAF;AAKD,CAlBO,CAAR;;;;;;;;;;0BAvBMnB,Y;0BAWAO,S","sourcesContent":["import {fillSimpleSelectors} from '../selectorsFactory'\n\nconst initialState = {\n  loading: false,\n  users: [],\n  dictionary: {\n    countries: [],\n    cities: {\n      districts: []\n    }\n  }\n}\n\nconst testState = {\n  users: [\n    {\n      name: 'Duncan',\n      lastname: 'Macleod'\n    }\n  ],\n  dictionary: {\n    countries: ['Russia', 'Germany', 'Bulgaria']\n  }\n}\n\ndescribe('selectorsFactory', () => {\n  const simpleSelectors = fillSimpleSelectors(initialState)\n\n  it('first level selectors are created', () => {\n    const usersSelector = simpleSelectors.users.selector\n    expect(usersSelector(testState)).toEqual(testState.users)\n  })\n\n  it('nested level selectors are created', () => {\n    const countriesSelector = simpleSelectors.dictionary.countries.selector\n    expect(countriesSelector(testState)).toEqual(testState.dictionary.countries)\n  })\n\n  it('if state does not have nested data, then selector returns undefined', () => {\n    const districtsSelector =\n      simpleSelectors.dictionary.cities.districts.selector\n    expect(districtsSelector(testState)).toEqual(undefined)\n  })\n})\n"],"file":"selectorsFactory.test.js"}