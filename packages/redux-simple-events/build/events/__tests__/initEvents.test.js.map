{"version":3,"sources":["../../../src/events/__tests__/initEvents.test.ts"],"names":["describe","pageOpenedType","pageOpenedActionCreator","someOpenParam","payload","pageOpenedReducer","state","action","opened","pageOpenedEventTemplate","type","reducer","pageClosedEventTemplate","it","event","allEvents","pageOpenedEvent","expect","toContain","pageClosedEvent","toHaveLength","toEqual"],"mappings":"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","sourcesContent":["import initEvents from '../initEvents'\nimport {Action, Event, State} from '../types'\n\ndescribe('initEvents', () => {\n  const pageOpenedType = 'PAGE_OPENED'\n  const pageOpenedActionCreator = (someOpenParam: unknown): Action => ({\n    payload: {\n      someOpenParam\n    }\n  })\n  const pageOpenedReducer = (state: State, action: Action): State => {\n    return {\n      ...state,\n      opened: true,\n      ...action.payload\n    }\n  }\n\n  const pageOpenedEventTemplate: Event = {\n    type: pageOpenedType,\n    action: pageOpenedActionCreator,\n    reducer: pageOpenedReducer\n  }\n\n  const pageClosedEventTemplate: Event = {\n    type: 'PAGE_CLOSED',\n    action: () => ({}),\n    reducer: (state) => {\n      return {\n        ...state,\n        opened: false\n      }\n    }\n  }\n\n  it('initEvents inserts new event in the allEvents array', () => {\n    const {event, allEvents} = initEvents()\n    const pageOpenedEvent = event(pageOpenedEventTemplate)\n    expect(allEvents).toContain(pageOpenedEvent)\n    const pageClosedEvent = event(pageClosedEventTemplate)\n    expect(allEvents).toContain(pageClosedEvent)\n    expect(allEvents).toHaveLength(2)\n  })\n\n  it('event method sets type correctly', () => {\n    const {event} = initEvents()\n    const pageOpenedEvent = event(pageOpenedEventTemplate)\n    expect(pageOpenedEvent.type).toEqual(pageOpenedType)\n  })\n\n  it('event method creates action creator correctly', () => {\n    const {event} = initEvents()\n    const pageOpenedEvent = event(pageOpenedEventTemplate)\n    expect(pageOpenedEvent.action().type).toEqual(pageOpenedType)\n    const someOpenParam = 'someOpenParam'\n    expect(pageOpenedEvent.action(someOpenParam)).toEqual({\n      type: pageOpenedType,\n      ...pageOpenedActionCreator(someOpenParam)\n    })\n  })\n\n  it('event method creates reducer correctly', () => {\n    const {event} = initEvents()\n    const pageOpenedEvent = event(pageOpenedEventTemplate)\n    expect(pageOpenedEvent.type).toEqual(pageOpenedType)\n    const state = {}\n    const action = {\n      payload: {\n        someOpenParam: 'someOpenParam'\n      }\n    }\n    expect(pageOpenedEvent.reducer?.(state, action)).toEqual(\n      pageOpenedReducer(state, action)\n    )\n  })\n})\n"],"file":"initEvents.test.js"}