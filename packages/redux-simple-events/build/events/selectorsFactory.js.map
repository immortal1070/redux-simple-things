{"version":3,"sources":["../../src/events/selectorsFactory.ts"],"names":["createSelector","defaultMemoize","equals","selectorFieldName","fillSelectorsRec","object","pathParams","value","Object","keys","filter","key","forEach","fillSimpleSelectors","initialState","stateDeepCopy"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;AAEA;;;AAGA,IAAMA,cAAc,GAAG,qCAAsBC,wBAAtB,EAAsCC,aAAtC,CAAvB;AAEA,IAAMC,iBAAiB,GAAG,UAA1B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAAmD;AAAA,oCAAhCC,UAAgC;AAAhCA,IAAAA,UAAgC;AAAA;;AAC1E,MAAID,MAAJ,EAAY;AACV,QAAI,CAACA,MAAM,CAACF,iBAAD,CAAX,EAAgC;AAC9B;AACAE,MAAAA,MAAM,CAACF,iBAAD,CAAN,GAA4BH,cAAc,CACxC,iBAAKM,UAAL,CADwC,EAExC,UAACC,KAAD;AAAA,eAAWA,KAAX;AAAA,OAFwC,CAA1C;AAID;;AACDC,IAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EACGK,MADH,CACU,UAACC,GAAD;AAAA,aAASA,GAAG,KAAKR,iBAAjB;AAAA,KADV,EAEGS,OAFH,CAEW,UAACD,GAAD,EAAS;AAChB;AACA,UAAI,CAAC,gCAAcN,MAAM,CAACM,GAAD,CAApB,CAAL,EAA0C;AACxC;AACAN,QAAAA,MAAM,CAACM,GAAD,CAAN,GAAc,EAAd;AACD,OALe,CAMhB;;;AACAP,MAAAA,gBAAgB,MAAhB,UAAiBC,MAAM,CAACM,GAAD,CAAvB,mBAA8CL,UAA9C,IAA2DK,GAA3D;AACD,KAVH;AAWD;;AACD,SAAON,MAAP;AACD,CAtBD;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,YADiC,EAGvB;AACV,MAAMC,aAAa,GAAG,kBAAMD,YAAN,CAAtB;;AADU,qCADPR,UACO;AADPA,IAAAA,UACO;AAAA;;AAEV,SAAOF,gBAAgB,MAAhB,UAAiBW,aAAjB,mBAAuCT,UAAvC,GAAP;AACD,CANM;;;;;;;;;;;;0BA3DDN,c;0BAEAG,iB;0BAEAC,gB;0BAuDOS,mB","sourcesContent":["import {State} from './types'\nimport {createSelectorCreator, defaultMemoize} from 'reselect'\nimport {isPlainObject} from '../utils/objectUtils'\nimport {clone, equals, path} from 'ramda'\n\n/**\n * selector with deep equals instead of \"===\"\n */\nconst createSelector = createSelectorCreator(defaultMemoize, equals)\n\nconst selectorFieldName = 'selector'\n\nconst fillSelectorsRec = (object: State, ...pathParams: string[]): State => {\n  if (object) {\n    if (!object[selectorFieldName]) {\n      // eslint-disable-next-line no-param-reassign\n      object[selectorFieldName] = createSelector(\n        path(pathParams),\n        (value) => value\n      )\n    }\n    Object.keys(object)\n      .filter((key) => key !== selectorFieldName)\n      .forEach((key) => {\n        // eslint-disable-next-line prettier/prettier\n        if (!isPlainObject(object[key] as State)) {\n          // eslint-disable-next-line no-param-reassign\n          object[key] = {}\n        }\n        // eslint-disable-next-line prettier/prettier\n        fillSelectorsRec(object[key] as State, ...[...pathParams], key)\n      })\n  }\n  return object\n}\n\n/**\n * Builds selectors for each field in the initialState using reselect lib.\n *\n * e.g. for state\n * const initialState = {\n    samlConfigs: [],\n    operation: OperationTypes.OVERVIEW,\n    types: {\n        protocolVersionTypes: [],\n    ...\n\n    this will return object\n    {\n        samlConfigs: {\n            selector: >correct selector<\n       },\n       operation: {\n            selector: >correct selector<\n       },\n       types: {\n            selector: >correct selector<,\n            protocolVersionTypes: {\n                selector: >correct selector<,\n            }\n       },\n    }\n\n Usage:\n const protocolVersionTypes = useSelector(samlConfigStoreRouting.types.protocolVersionTypes._selector)\n\n */\nexport const fillSimpleSelectors = (\n  initialState: State,\n  ...pathParams: string[]\n): State => {\n  const stateDeepCopy = clone(initialState)\n  return fillSelectorsRec(stateDeepCopy, ...[...pathParams])\n}\n"],"file":"selectorsFactory.js"}