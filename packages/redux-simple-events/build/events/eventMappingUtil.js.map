{"version":3,"sources":["../../src/events/eventMappingUtil.ts"],"names":["eventsToReducersMap","events","reducersMapping","forEach","event","type","reducer","applyReducerFromMap","state","action"],"mappings":";;;;;;;;;;;;AAEA;;;AAGO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,MAAD,EAAsC;AACvE,MAAMC,eAAgC,GAAG,EAAzC;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAACC,KAAD,EAAW;AACxBF,IAAAA,eAAe,CAACE,KAAK,CAACC,IAAP,CAAf,GAA8BD,KAAK,CAACE,OAApC;AACD,GAFD;AAGA,SAAOJ,eAAP;AACD,CANM;AAQP;;;;;;;AAGO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,KADiC,EAEjCC,MAFiC,EAGjCP,eAHiC,EAIvB;AACV,MAAIA,eAAe,CAACO,MAAM,CAACJ,IAAR,CAAnB,EAAkC;AAChC,WAAOH,eAAe,CAACO,MAAM,CAACJ,IAAR,CAAf,CAA6BG,KAA7B,EAAoCC,MAApC,CAAP;AACD;;AACD,SAAOD,KAAP;AACD,CATM;;;;;;;;;;;;0BAXMR,mB;0BAWAO,mB","sourcesContent":["import {Action, ReducersMapping, State, Event} from './types'\n\n/**\n * Returns map [eventName -> reducer]\n */\nexport const eventsToReducersMap = (events: Event[]): ReducersMapping => {\n  const reducersMapping: ReducersMapping = {}\n  events.forEach((event) => {\n    reducersMapping[event.type] = event.reducer\n  })\n  return reducersMapping\n}\n\n/**\n * Applies reducer if action is present in the reducersMapping\n */\nexport const applyReducerFromMap = (\n  state: State,\n  action: Action,\n  reducersMapping: ReducersMapping\n): State => {\n  if (reducersMapping[action.type]) {\n    return reducersMapping[action.type](state, action)\n  }\n  return state\n}\n"],"file":"eventMappingUtil.js"}